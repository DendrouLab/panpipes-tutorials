---
title: Using Panpipes:ingest on a CITEseq dataset produced by cellranger 
author: yohana Berhe
github: Yohana-Berhe
---

In this tutorial, we will use panpipes ingest workflow to analyze paired RNA and protein CITEseq data. The dataset for this analysis was generated using cellranger and is stored in the 'outs' folder. We'll walk you through the process of preparing the submission file necessary for the ingest pipeline, and we'll also demonstrate how to make edits to the 'pipeline.yml' file created by 'panpipes ingest config'.

Before we begin, make sure to install panpipes by following the installation instructions provided here: [Installation Instructions](https://panpipes-pipelines.readthedocs.io/en/latest/install.html)

## Possible issues during installation
You may encounter an error message stating "no time installed in environment" when running the ingest analsyis, eventhough the 'time' package is installed within the Panpipes environment. In such cases, installing the 'time' package in the base environment resolves it.

## Creating your working enviroment
```shell
mkdir panpipes & cd panpipes
mkdir cite & cd cite
mkdir ingest & cd ingest
conda activate pipeline_env # if using conda.
panpipes ingest config

```
The last code would create two files: 'pipeline.log' and 'pipeline.yml'. 

- `pipeline.log` stores the log of your analysis. Useful to see detailed view of errors that may occur during the analysis.
- `pipeline.yml` is a customizable file that instructs panpipes on how to proceed.

## Preparing the Submission file for ingest pipeline
Panpipes requires a specific format for the submission file. For detailed instructions on how to structure this file correctly, please refer to the following documentation: [Panpipes Submission File Instructions](https://panpipes-pipelines.readthedocs.io/en/latest/usage/setup_for_qc_mm.html)

### Submission File Structure

In the submission file, there are a minimum of three tab-separated columns, each with specific purposes:

1. **'sample_id':**
   - This column is where you define the name you want to assign to the sample you are analyzing. It doesn't necessarily correspond to the sample names in your dataset.
   - For example, in your dataset with data from six individuals, you might have sample names like 'Sample_1' to 'Sample_6,' but you can choose to name your sample something more meaningful to you, like 'pbmc'

2. **'rna_path':**
   - This column specifies the path to the file to be analyzed. If you are analyzing data generated by Cellranger and it's located in the 'outs' folder, provide the path to the 'outs' folder.
   - If your data is located elsewhere, provide the absolute path.

3. **'rna_filetype':**
   - Set this column to 'cellranger' if you provided the 'outs' folder as the 'rna_path.'
   - If you provided an absolute path, set it to '10X_h5.'

4. **'prot_path':**
   - In the case of paired data, use the same path as 'rna_path' for the 'prot_path.'

5. **'prot_filetype':**
   - Similarly, if it's a paired dataset, use the same file type as 'rna_filetype' for 'prot_filetype.'

You have the option to include additional columns in the submission file to represent metadata such as 'batch,' 'sex,' or any other relevant information.

**Important:** Ensure that the submission file is tab-separated. Using other delimiters can result in errors, and the pipeline may not run as expected.



## Editing the pipeline.yml File

The `pipeline.yml` file offers various customizable inputs:

- `condaenv`: Path to the Panpipes environment.
- `project`: Specify the project name.
- `sample_prefix`: Set the prefix for the final object generated by the ingest pipeline.
- `use_existing_h5mu`: If you are starting from the Cell Ranger output (i.e., the 10X_h5 file), set this to `False`.
- `submission_file`: Path to the submission file.
- `metadatacols`: Use this section if you wish to include additional columns specified in your submission file, such as 'sex,' 'batch,' 'diseases,' etc. Leave it empty if you don't want to include metadata.
- `modalities`: Enable the modalities present in your dataset, setting non-existent modalities to 'False':
  - `rna`: True
  - `prot`: True
  - `bcr`: False
  - `tcr`: False
  - `atac`: False

- `barcode_mtd`: If you have barcode metadata to include, prepare it in a CSV file with columns for 'barcode_id' and 'sample_id' (matching the 'sample_id' column in the submission file):
  - `include`: Set to `False` if no barcode metadata is available.
  - `path`: Provide the path to the metadata CSV file.
  - `metadatacols`: Specify the metadata columns present in your file (e.g., if using Vireo output, ask Faby for details).

- `protein_metadata_table`: Add protein metadata, such as whether a protein is an isotype or not. Leave empty if not applicable.

- `index_col_choice`: Customize as needed.

- `load_prot_from_raw`: Set to `False`.

- `subset_prot_barcodes_to_rna`: Set to `False`.

- `plot_10X_metrics`: For now, this plot is not functional, so set it to `False`.

- `kneeplot`: Similarly, the knee plot is currently not operational, so set it to `False`.

## Gene Expression (GEX) Quality Control Options

You have the option to customize QC settings, or you can leave them at their default values.

Panpipes provides a list of genes for calculating QC values, such as those related to the cell cycle (cc) and mitochondrial genes. You can download this list from [this link](https://github.com/DendrouLab/panpipes/blob/master/resources/qc_genelist_1.0.csv) and specify the path to this gene list in your configuration:

- `custom_genes_file`: Provide the path to the downloaded gene list file. 


## Plot RNA QC Metrics
- `plotqc_grouping_var`: `sample_id`
  - The 'sample_id' is the one provided in the submission file.
  - Leaving it empty may result in an error: 'Error: I don't have the minimum variable _sampleid_ to facet on, and will stop here.' Execution halted.'

## ADT Normalization Options

Within Panpipes, you have two options for ADT (Antibody-Derived Tag) normalization:

- **clr (Common Log Ratio) Normalization:** You can generally leave these options at their default values.

- **dsb (denoised and scaled by background) Normalization:** If you choose this option, make sure to set 'assess_background' to 'true' in the `pipeline.yml` file.

## Profiling Protein Ambient Background
- `assess_background`: By default, this is set to `False`. If you are using the 'dsb' normalization for ADT, be sure to change this to `True`.

## Issue Encountered with 'dsb' Normalization

I've been facing issues when trying to run the 'dsb' normalization in my system. The pipeline gets aborted due to an error, specifically, an error message that states: 

```plaintext
raise ValueError(err)
ValueError: Could not interpret value `None` for `hue`. An entry with this name does not appear in `data`.
```

Which is occuring in the 'assess_background' step. I've already created an issue in the Panpipes GitHub repository. 

## Note

During the analysis, you may encounter certain errors in the log file. Some of these errors do not led to aborting the workflow and can be safely ignored. For example:

- `'BASHRCSOURCED'`: This error may appear alongside various other error types. It is safe to ignore this specific error, as a solution is currently being worked on.

## Run Panpipes Ingest Pipeline

To execute the full Panpipes ingest pipeline, use the following command:

```shell
panpipes ingest make full --local
```
The '--local' option is added to ensure the pipeline runs on the current node in a server.

## Output of Ingest Pipeline

When the ingest pipeline successfully completes, you will find the following outputs:

- `figures` 
- `filtered_threshold_filter_explained.tsv`
- `logs`
- `scrublet` 
- `filtered_adt_qc_metrics_per_sample_id.csv`
- `filtered_threshold_filter.tsv`
- `tmp`
- `filtered_cell_metadata.tsv`
- `filtered_unfilt.h5mu` 





